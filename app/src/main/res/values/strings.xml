<resources>
    <string name="hello_blank_fragment">hello_blank_fragment</string>

    <string name="app_name">Gamification</string>
    <string name="all_next">Next</string>
    <string name="all_exit">Exit</string>
    <string name="draw_info">Click next or swipe to draw a card</string>
    <string name="createDeck_name">Name:</string>
    <string name="all_enterName">Enter name</string>
    <string name="createDeck_description">Description:</string>
    <string name="createDeck_enterDescription">Enter description</string>
    <string name="createDeck_prev">Previous</string>
    <string name="createDeck_type">Type:</string>
    <string name="createDeck_setImgGallery">Add image</string>
    <string name="all_delete">Delete</string>
    <string name="all_duplicate">Duplicate</string>
    <string name="deckManagerMenu_delete">Click to delete decks!</string>
    <string name="deckManagerMenu_duplicate">Click to duplicate decks</string>
    <string name="change_name_txt">Change name of deck</string>
    <string name="all_cancel">Exit</string>
    <string name="all_ok">OK</string>
    <string name="change_name_emptyField">Please fill field</string>
    <string name="all_award">award</string>
    <string name="list_info">You don\'t have any deck. Please create one.</string>
    <string name="all_addDeck">Add deck</string>
    <string name="all_name">Name</string>
    <string name="deckList_number">No. awards</string>
    <string name="cardList_type">type</string>
    <string name="cardEditor_addCard">Add card</string>
    <string name="all_save">Save</string>
    <string name="draw_congratulations">Congratulations you drew all cards</string>
    <string name="draw_blankCard">Blank card</string>
    <string name="draw_sorryStatement">Sorry, you drew a blank card</string>
    <string name="draw_contentDescription">image of award</string>
    <string name="draw_counter">All cards:</string>
    <string-array name="menu_items">
        <item>Create Deck</item>
        <item>Draw Card</item>
        <item>Deck Manager</item>
        <item>Help</item>
    </string-array>
    <string-array name="type_array">
        <item>Small</item>
        <item>Medium</item>
        <item>Large</item>
    </string-array>
    <string-array name="help_array_title">
        <item>Mercury</item>
        <item>Venus</item>
        <item>Venus</item>
    </string-array>
    <string-array name="help_array_desc">
        <item>Opis1</item>
        <item>Now that we have an idea of how the various methods should be organized, we can start creating our app. We simplify the implementation by only focusing on the action to add a new note. The source files of this tutorial are available on GitHub.

We use only one Activity with a layout that includes:

EditText for new notes
Button to add a note
RecyclerView to list all notes
two TextView elements and a Button inside a RecyclerView holder
Interfaces
Let’s begin by creating the interfaces. To keep everything organized, we place the interfaces within a holder. Again, in this example we focus on the action to add a new note.

public interface MVP_Main {
    /**
     * Required View methods available to Presenter.
     * A passive layer, responsible to show data
     * and receive user interactions
     */
    interface RequiredViewOps {
    	// View operations permitted to Presenter
		Context getAppContext();
        	Context getActivityContext();
		void notifyItemInserted(int layoutPosition);
        	void notifyItemRangeChanged(int positionStart, int itemCount);
    }
</item>
        <item>Now that we have an idea of how the various methods should be organized, we can start creating our app. We simplify the implementation by only focusing on the action to add a new note. The source files of this tutorial are available on GitHub.

We use only one Activity with a layout that includes:

EditText for new notes
Button to add a note
RecyclerView to list all notes
two TextView elements and a Button inside a RecyclerView holder
Interfaces
Let’s begin by creating the interfaces. To keep everything organized, we place the interfaces within a holder. Again, in this example we focus on the action to add a new note.

public interface MVP_Main {
    /**
     * Required View methods available to Presenter.
     * A passive layer, responsible to show data
     * and receive user interactions
     */
    interface RequiredViewOps {
    	// View operations permitted to Presenter
		Context getAppContext();
        	Context getActivityContext();
		void notifyItemInserted(int layoutPosition);
        	void notifyItemRangeChanged(int positionStart, int itemCount);
    }
</item>
    </string-array>
</resources>
